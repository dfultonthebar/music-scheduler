#!/bin/bash

echo "Starting setup_frontend.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_frontend.log) 2>&1

echo "Debug: Logging initialized for setup_frontend.sh"

# Ensure we're in the correct directory
cd /music_scheduler

# Fix ownership and permissions of node_modules before removal
echo "Fixing ownership and permissions of node_modules..."
sudo chown -R musicu:www-data /music_scheduler/node_modules 2>/dev/null || true
sudo chmod -R 775 /music_scheduler/node_modules 2>/dev/null || true

# Remove existing node_modules and package-lock.json with sudo
echo "Removing existing node_modules and package-lock.json..."
sudo rm -rf node_modules package-lock.json

# Set up base React app structure
echo "Setting up base React app structure..."
mkdir -p src

cat << 'EOF' > /music_scheduler/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'static',
    emptyOutDir: true,
  },
  server: {
    proxy: {
      '/api': 'http://localhost:8000',
    },
  },
})
EOF

cat << 'EOF' > /music_scheduler/package.json
{
  "name": "music_scheduler",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-calendar": "^5.1.0",
    "jsonwebtoken": "^9.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.5.0",
    "vite": "^6.3.5",
    "tailwindcss": "^3.4.3",
    "postcss": "^8.4.40",
    "autoprefixer": "^10.4.20",
    "browserslist": "^4.24.5",
    "caniuse-lite": "^1.0.30001720"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not op_mini all"
  ]
}
EOF

# Create src/main.jsx (Vite entry point)
echo "Creating src/main.jsx..."
cat << 'EOF' > /music_scheduler/src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import '../index.jsx';
import './index.css';
EOF

# Create initial index.jsx with Tailwind classes
cat << 'EOF' > /music_scheduler/index.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<div className="text-red-500 p-6 bg-gray-100">Loading...</div>);
EOF

# Create index.html with reference to /src/main.jsx
cat << 'EOF' > /music_scheduler/index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Music Lesson Scheduler</title>
  <link rel="stylesheet" href="/static/tailwind.css">
  <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>
EOF

# Create index.css for Tailwind CSS imports
echo "Creating src/index.css..."
cat << 'EOF' > /music_scheduler/src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;
EOF

# Create tailwind.config.js
echo "Creating tailwind.config.js..."
cat << 'EOF' > /music_scheduler/tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./index.jsx",
    "./src/**/*.{jsx,js}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
EOF

# Clear npm cache with sudo
echo "Clearing npm cache..."
sudo npm cache clean --force

# Install dependencies with sudo
echo "Installing dependencies..."
sudo npm install
if [ $? -ne 0 ]; then
    echo "Error: npm install failed. Check logs for details."
    exit 1
fi

# Fix ownership of node_modules after installation
echo "Fixing ownership of node_modules after installation..."
sudo chown -R musicu:www-data /music_scheduler/node_modules
sudo chmod -R 775 /music_scheduler/node_modules

# Force update caniuse-lite
echo "Forcing update of caniuse-lite..."
export BROWSERSLIST_UPDATE=force
sudo npm update caniuse-lite
sudo npx update-browserslist-db@latest --force

# Build React app
echo "Building React app (initial build with placeholders)..."
sudo npm run build
if [ $? -ne 0 ]; then
    echo "Error: Vite build failed. Check logs for details."
    exit 1
fi

# Build Tailwind CSS with explicit Browserslist configuration
echo "Building Tailwind CSS..."
sudo env BROWSERSLIST=">0.2%, not dead, not op_mini all" npx tailwindcss -i src/index.css -o static/tailwind.css --minify
if [ $? -ne 0 ]; then
    echo "Error: Tailwind CSS build failed. Check logs for details."
    exit 1
fi
echo "tailwind.css successfully created."
ls -l /music_scheduler/static/tailwind.css

# Update index.html with the latest JS and CSS files
echo "Updating index.html with latest JS and CSS files..."
LATEST_CSS=$(ls -t /music_scheduler/static/assets/index-*.css | head -n 1 | xargs basename 2>/dev/null || echo "")
LATEST_JS=$(ls -t /music_scheduler/static/assets/index-*.js | head -n 1 | xargs basename 2>/dev/null || echo "")
if [ -n "$LATEST_CSS" ] && [ -n "$LATEST_JS" ]; then
    sed -i "s|<link rel=\"stylesheet\" href=\"/static/tailwind.css\">|<link rel=\"stylesheet\" href=\"/static/tailwind.css\">\n  <link rel=\"stylesheet\" href=\"/static/assets/$LATEST_CSS\">|" /music_scheduler/index.html
    sed -i "s|<script type=\"module\" src=\"/src/main.jsx\">|<script type=\"module\" src=\"/static/assets/$LATEST_JS\">|" /music_scheduler/index.html
    echo "$LATEST_CSS"
    echo "$LATEST_JS"
else
    echo "Error: Could not find latest CSS or JS files to update index.html"
    exit 1
fi

# Download a simple favicon.ico file
echo "Downloading favicon.ico..."
curl -o /music_scheduler/static/favicon.ico https://www.google.com/favicon.ico
if [ $? -ne 0 ]; then
    echo "Warning: Failed to download favicon.ico. Creating an empty placeholder instead."
    touch /music_scheduler/static/favicon.ico
fi
chown musicu:www-data /music_scheduler/static/favicon.ico
chmod 664 /music_scheduler/static/favicon.ico

echo "Frontend setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_frontend.log"
