#!/bin/bash

echo "Starting setup_backend.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_backend.log) 2>&1

echo "Debug: Logging initialized for setup_backend.sh"

# Clear old Flask app logs
echo "Clearing old Flask app logs..."
rm -f /music_scheduler/logs/flask_app.log
touch /music_scheduler/logs/flask_app.log
chown musicu:www-data /music_scheduler/logs/flask_app.log
chmod 664 /music_scheduler/logs/flask_app.log

# Create config.json with placeholder email and SMS settings
echo "Creating config.json with placeholder email and SMS settings..."
cat > /music_scheduler/config.json << 'EOF'
{
  "email": {
    "smtp_server": "smtp.example.com",
    "smtp_port": 587,
    "sender_email": "your-email@example.com",
    "sender_password": "your-password"
  },
  "sms": {
    "twilio_account_sid": "your-account-sid",
    "twilio_auth_token": "your-auth-token",
    "twilio_phone_number": "+1234567890"
  }
}
EOF

# Create app.py with enhanced functionality
echo "Creating app.py..."
cat > /music_scheduler/app.py << 'EOF'
from flask import Flask, request, jsonify, session
import mysql.connector
import bcrypt
import jwt
import logging
import json
import smtplib
from email.mime.text import MIMEText
from twilio.rest import Client
from datetime import datetime, timedelta

app = Flask(__name__)
app.secret_key = 'MusicU2025SecretKey'  # Replace with a secure key in production

# Setup logging
logging.basicConfig(filename='/music_scheduler/logs/flask_app.log', level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(message)s')

# Load configuration
with open('/music_scheduler/config.json', 'r') as f:
    config = json.load(f)

# Database connection
db_config = {
    'user': 'musicu_user',
    'password': 'MusicU2025',
    'host': 'localhost',
    'database': 'musicu_db'
}

def get_db_connection():
    try:
        conn = mysql.connector.connect(**db_config)
        logging.info("Successfully connected to the database")
        return conn
    except Exception as e:
        logging.error(f"Failed to connect to the database: {str(e)}")
        raise

# Send email using Gmail SMTP
def send_email(to_email, subject, body):
    try:
        email_config = config['email']
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = email_config['sender_email']
        msg['To'] = to_email

        with smtplib.SMTP(email_config['smtp_server'], email_config['smtp_port']) as server:
            server.starttls()
            server.login(email_config['sender_email'], email_config['sender_password'])
            server.sendmail(email_config['sender_email'], to_email, msg.as_string())
        logging.info(f"Email sent to {to_email}")
    except Exception as e:
        logging.error(f"Failed to send email to {to_email}: {str(e)}")
        raise

# Send SMS using Twilio
def send_sms(to_phone, body):
    try:
        sms_config = config['sms']
        client = Client(sms_config['twilio_account_sid'], sms_config['twilio_auth_token'])
        message = client.messages.create(
            body=body,
            from_=sms_config['twilio_phone_number'],
            to=to_phone
        )
        logging.info(f"SMS sent to {to_phone}: {message.sid}")
    except Exception as e:
        logging.error(f"Failed to send SMS to {to_phone}: {str(e)}")
        raise

@app.route('/api/check-auth', methods=['GET'])
def check_auth():
    username = session.get('username')
    if username:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role FROM users WHERE username = %s", (username,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        if result:
            logging.info(f"Check-auth successful for username: {username}, role: {result[0]}")
            return jsonify({'authenticated': True, 'role': result[0]})
    logging.info("Check-auth: No authenticated user found")
    return jsonify({'authenticated': False, 'role': None})

@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        logging.warning(f"Missing username or password in login attempt")
        return jsonify({'authenticated': False}), 400

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT password, role FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()

    if user:
        stored_password = user[0].encode('utf-8')
        logging.info(f"Stored hashed password for {username}: {stored_password}")
        logging.info(f"Provided password: {password}")
        if bcrypt.checkpw(password.encode('utf-8'), stored_password):
            session['username'] = username
            logging.info(f"Successful login for username: {username}")
            return jsonify({'authenticated': True, 'role': user[1]})
        else:
            logging.warning(f"Password mismatch for username: {username}")
    else:
        logging.warning(f"User not found: {username}")
    logging.warning(f"Failed login attempt for username: {username}")
    return jsonify({'authenticated': False}), 401

@app.route('/api/logout', methods=['POST'])
def logout():
    session.pop('username', None)
    logging.info("User logged out")
    return jsonify({'message': 'Logged out'})

@app.route('/api/users', methods=['GET', 'POST'])
def manage_users():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/users")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE username = %s", (username,))
    role = cursor.fetchone()[0]

    if role != 'admin':
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/users by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        cursor.execute("SELECT id, username, role FROM users")
        users = cursor.fetchall()
        cursor.close()
        conn.close()
        return jsonify({'users': [
            {'id': u[0], 'username': u[1], 'role': u[2]} for u in users
        ]})

    if request.method == 'POST':
        data = request.get_json()
        new_username = data.get('username')
        new_password = data.get('password')
        new_role = data.get('role')

        if not new_username or not new_password or not new_role:
            cursor.close()
            conn.close()
            logging.warning("Missing fields in user creation request")
            return jsonify({'error': 'Missing fields'}), 400

        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        try:
            cursor.execute("INSERT INTO users (username, password, role) VALUES (%s, %s, %s)",
                           (new_username, hashed_password, new_role))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"User {new_username} created by {username}")
            return jsonify({'message': 'User created'})
        except mysql.connector.Error as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to create user {new_username}: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/students', methods=['GET', 'POST'])
def manage_students():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/students")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, role FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    user_id, role = user

    if role != 'admin':
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/students by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        cursor.execute("SELECT id, name, email, phone, instrument FROM students WHERE created_by = %s", (user_id,))
        students = cursor.fetchall()
        cursor.close()
        conn.close()
        return jsonify({'students': [
            {'id': s[0], 'name': s[1], 'email': s[2], 'phone': s[3], 'instrument': s[4]} for s in students
        ]})

    if request.method == 'POST':
        data = request.get_json()
        name = data.get('name')
        email = data.get('email')
        phone = data.get('phone')
        instrument = data.get('instrument')

        if not name:
            cursor.close()
            conn.close()
            logging.warning("Missing name in student creation request")
            return jsonify({'error': 'Missing name'}), 400

        try:
            cursor.execute("INSERT INTO students (name, email, phone, instrument, created_by) VALUES (%s, %s, %s, %s, %s)",
                           (name, email, phone, instrument, user_id))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"Student {name} created by {username}")
            return jsonify({'message': 'Student created'})
        except mysql.connector.Error as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to create student {name}: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/lessons', methods=['GET', 'POST'])
def manage_lessons():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/lessons")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, role FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    user_id, role = user

    if role != 'admin':
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/lessons by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        cursor.execute("""
            SELECT l.id, s.name AS student_name, l.instructor_id, l.lesson_date, l.lesson_time, l.duration, l.instrument, l.reminder_enabled
            FROM lessons l
            JOIN students s ON l.student_id = s.id
        """)
        lessons = cursor.fetchall()
        cursor.close()
        conn.close()

        return jsonify({'lessons': [
            {
                'id': l[0],
                'student_name': l[1],
                'instructor_id': l[2],
                'lesson_date': str(l[3]),
                'lesson_time': str(l[4]),
                'duration': l[5],
                'instrument': l[6],
                'reminder_enabled': l[7]
            } for l in lessons
        ]})

    if request.method == 'POST':
        data = request.get_json()
        student_id = data.get('student_id')
        instructor_id = data.get('instructor_id')
        lesson_date = data.get('lesson_date')
        lesson_time = data.get('lesson_time')
        duration = data.get('duration')
        instrument = data.get('instrument')
        reminder_enabled = data.get('reminder_enabled', False)

        if not all([student_id, instructor_id, lesson_date, lesson_time, duration, instrument]):
            cursor.close()
            conn.close()
            logging.warning("Missing fields in lesson creation request")
            return jsonify({'error': 'Missing fields'}), 400

        # Parse lesson start and end times
        lesson_start = datetime.strptime(f"{lesson_date} {lesson_time}", "%Y-%m-%d %H:%M")
        lesson_end = lesson_start + timedelta(minutes=int(duration))
        lesson_end_with_buffer = lesson_end + timedelta(minutes=5)  # Add 5-minute buffer

        # Check for overlapping lessons
        cursor.execute("""
            SELECT lesson_date, lesson_time, duration
            FROM lessons
            WHERE instructor_id = %s AND lesson_date = %s
        """, (instructor_id, lesson_date))
        existing_lessons = cursor.fetchall()

        for existing in existing_lessons:
            existing_start = datetime.strptime(f"{existing[0]} {existing[1]}", "%Y-%m-%d %H:%M:%S")
            existing_end = existing_start + timedelta(minutes=int(existing[2]))
            existing_end_with_buffer = existing_end + timedelta(minutes=5)

            # Check if the new lesson starts within an existing lesson or within 5 minutes after
            if (lesson_start >= existing_start and lesson_start < existing_end_with_buffer) or \
               (lesson_end > existing_start and lesson_end <= existing_end_with_buffer) or \
               (lesson_start <= existing_start and lesson_end >= existing_end):
                cursor.close()
                conn.close()
                logging.warning(f"Lesson scheduling conflict for instructor {instructor_id} on {lesson_date} at {lesson_time}")
                return jsonify({'error': 'Instructor has a conflicting lesson at this time or within 5 minutes after.'}), 400

        try:
            cursor.execute("""
                INSERT INTO lessons (student_id, instructor_id, lesson_date, lesson_time, duration, instrument, reminder_enabled)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (student_id, instructor_id, lesson_date, lesson_time, duration, instrument, reminder_enabled))
            conn.commit()

            # Send reminders if enabled
            if reminder_enabled:
                cursor.execute("SELECT name, email, phone FROM students WHERE id = %s", (student_id,))
                student = cursor.fetchone()
                if student:
                    student_name, email, phone = student
                    lesson_datetime = f"{lesson_date} {lesson_time}"
                    body = f"Reminder: You have a {instrument} lesson with your instructor on {lesson_datetime} (Duration: {duration} minutes)."
                    if email:
                        send_email(email, "Lesson Reminder", body)
                    if phone:
                        send_sms(phone, body)

            cursor.close()
            conn.close()
            logging.info(f"Lesson created for student {student_id} by {username}")
            return jsonify({'message': 'Lesson created'})
        except Exception as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to create lesson: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/my-lessons', methods=['GET'])
def get_my_lessons():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/my-lessons")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE username = %s AND role = 'instructor'", (username,))
    instructor = cursor.fetchone()

    if not instructor:
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/my-lessons by user {username}")
        return jsonify({'error': 'Forbidden'}), 403

    instructor_id = instructor[0]
    cursor.execute("""
        SELECT l.id, s.name AS student_name, l.lesson_date, l.lesson_time, l.duration, l.instrument
        FROM lessons l
        JOIN students s ON l.student_id = s.id
        WHERE l.instructor_id = %s
    """, (instructor_id,))
    lessons = cursor.fetchall()
    cursor.close()
    conn.close()

    logging.info(f"Retrieved lessons for instructor {username}")
    return jsonify({'lessons': [
        {
            'id': l[0],
            'student_name': l[1],
            'lesson_date': str(l[2]),
            'lesson_time': str(l[3]),
            'duration': l[4],
            'instrument': l[5]
        } for l in lessons
    ]})

@app.route('/api/availability', methods=['GET', 'POST'])
def manage_availability():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/availability")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, role FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    user_id, role = user

    # Allow admins to access with an instructor_id parameter
    instructor_id = None
    if role == 'admin':
        instructor_id = request.args.get('instructor_id')
        if not instructor_id:
            cursor.close()
            conn.close()
            logging.warning("Admin missing instructor_id for /api/availability")
            return jsonify({'error': 'Missing instructor_id'}), 400
    elif role == 'instructor':
        instructor_id = user_id
    else:
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/availability by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        cursor.execute("""
            SELECT id, day_of_week, start_time, end_time
            FROM instructor_availability
            WHERE instructor_id = %s
        """, (instructor_id,))
        availability = cursor.fetchall()
        cursor.close()
        conn.close()
        return jsonify({'availability': [
            {
                'id': a[0],
                'day_of_week': a[1],
                'start_time': str(a[2]),
                'end_time': str(a[3])
            } for a in availability
        ]})

    if request.method == 'POST':
        if role != 'instructor':
            cursor.close()
            conn.close()
            logging.warning(f"Forbidden POST to /api/availability by user {username} with role {role}")
            return jsonify({'error': 'Forbidden'}), 403

        data = request.get_json()
        days_of_week = data.get('days_of_week', [])
        start_time = data.get('start_time')
        end_time = data.get('end_time')

        if not days_of_week or not start_time or not end_time:
            cursor.close()
            conn.close()
            logging.warning("Missing fields in availability creation request")
            return jsonify({'error': 'Missing fields'}), 400

        try:
            for day in days_of_week:
                cursor.execute("""
                    INSERT INTO instructor_availability (instructor_id, day_of_week, start_time, end_time)
                    VALUES (%s, %s, %s, %s)
                """, (instructor_id, day, start_time, end_time))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"Availability added for instructor {username}")
            return jsonify({'message': 'Availability added'})
        except mysql.connector.Error as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to add availability: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/time-off', methods=['GET', 'POST'])
def manage_time_off():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/time-off")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, role FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    user_id, role = user

    # Allow admins to access with an instructor_id parameter
    instructor_id = None
    if role == 'admin':
        instructor_id = request.args.get('instructor_id')
        if not instructor_id:
            cursor.close()
            conn.close()
            logging.warning("Admin missing instructor_id for /api/time-off")
            return jsonify({'error': 'Missing instructor_id'}), 400
    elif role == 'instructor':
        instructor_id = user_id
    else:
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/time-off by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        cursor.execute("""
            SELECT id, start_date, end_date
            FROM instructor_time_off
            WHERE instructor_id = %s
        """, (instructor_id,))
        time_off = cursor.fetchall()
        cursor.close()
        conn.close()
        return jsonify({'time_off': [
            {
                'id': t[0],
                'start_date': str(t[1]),
                'end_date': str(t[2])
            } for t in time_off
        ]})

    if request.method == 'POST':
        if role != 'instructor':
            cursor.close()
            conn.close()
            logging.warning(f"Forbidden POST to /api/time-off by user {username} with role {role}")
            return jsonify({'error': 'Forbidden'}), 403

        data = request.get_json()
        start_date = data.get('start_date')
        end_date = data.get('end_date')

        if not start_date or not end_date:
            cursor.close()
            conn.close()
            logging.warning("Missing fields in time off request")
            return jsonify({'error': 'Missing fields'}), 400

        try:
            cursor.execute("""
                INSERT INTO instructor_time_off (instructor_id, start_date, end_date)
                VALUES (%s, %s, %s)
            """, (instructor_id, start_date, end_date))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"Time off added for instructor {username}")
            return jsonify({'message': 'Time off added'})
        except mysql.connector.Error as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to add time off: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/instruments', methods=['GET', 'POST'])
def manage_instruments():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/instruments")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE username = %s AND role = 'instructor'", (username,))
    instructor = cursor.fetchone()

    if not instructor:
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/instruments by user {username}")
        return jsonify({'error': 'Forbidden'}), 403

    instructor_id = instructor[0]

    if request.method == 'GET':
        cursor.execute("SELECT id, instrument FROM instructor_instruments WHERE instructor_id = %s", (instructor_id,))
        instruments = cursor.fetchall()
        cursor.close()
        conn.close()
        return jsonify({'instruments': [
            {'id': i[0], 'instrument': i[1]} for i in instruments
        ]})

    if request.method == 'POST':
        data = request.get_json()
        instrument = data.get('instrument')

        if not instrument:
            cursor.close()
            conn.close()
            logging.warning("Missing instrument in request")
            return jsonify({'error': 'Missing instrument'}), 400

        try:
            cursor.execute("INSERT INTO instructor_instruments (instructor_id, instrument) VALUES (%s, %s)",
                           (instructor_id, instrument))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"Instrument {instrument} added for instructor {username}")
            return jsonify({'message': 'Instrument added'})
        except mysql.connector.Error as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to add instrument: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/config', methods=['GET', 'PUT'])
def manage_config():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/config")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE username = %s", (username,))
    role = cursor.fetchone()[0]

    if role != 'admin':
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/config by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        with open('/music_scheduler/config.json', 'r') as f:
            config_data = json.load(f)
        return jsonify(config_data)

    if request.method == 'PUT':
        data = request.get_json()
        try:
            with open('/music_scheduler/config.json', 'w') as f:
                json.dump(data, f, indent=2)
            logging.info(f"Configuration updated by {username}")
            return jsonify({'message': 'Configuration updated'})
        except Exception as e:
            logging.error(f"Failed to update configuration: {str(e)}")
            return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    logging.info("Starting Flask app in debug mode")
    app.run(debug=True)
EOF

# Create run_app.sh
echo "Creating run_app.sh..."
cat > /music_scheduler/run_app.sh << 'EOF'
#!/bin/bash
source /music_scheduler/venv/bin/activate
exec gunicorn -b 127.0.0.1:8000 -w 4 app:app --log-file=/music_scheduler/logs/flask_app.log --log-level=info
EOF
chmod +x /music_scheduler/run_app.sh

# Recreate virtual environment with Python 3.12
echo "Recreating virtual environment with Python 3.12..."
rm -rf /music_scheduler/venv
python3.12 -m venv /music_scheduler/venv
source /music_scheduler/venv/bin/activate

# Install Python dependencies
echo "Installing Python dependencies..."
pip install --upgrade pip
pip install flask mysql-connector-python gunicorn PyJWT bcrypt twilio

# Test database connection
echo "Testing database connection..."
python3 -c "import mysql.connector; conn = mysql.connector.connect(user='musicu_user', password='MusicU2025', host='localhost', database='musicu_db'); print('Connected successfully'); conn.close()"

# Set initial permissions
echo "Setting initial permissions..."
chmod -R 755 /music_scheduler
chown -R musicu:www-data /music_scheduler

# Check for and resolve port conflicts on port 8000 with retries
echo "Checking for processes using port 8000..."
for ATTEMPT in {1..3}; do
    PORT_CHECK=$(lsof -i :8000 -t)
    if [ -n "$PORT_CHECK" ]; then
        echo "Port 8000 is in use by PID(s): $PORT_CHECK (Attempt $ATTEMPT/3)"
        echo "Killing processes using port 8000..."
        for PID in $PORT_CHECK; do
            kill -9 $PID
            if [ $? -eq 0 ]; then
                echo "Killed process $PID"
            else
                echo "Error: Failed to kill process $PID"
                exit 1
            fi
        done
        sleep 2  # Wait for the port to be freed
    else
        echo "Port 8000 is free."
        break
    fi
    if [ $ATTEMPT -eq 3 ] && [ -n "$(lsof -i :8000 -t)" ]; then
        echo "Error: Port 8000 still in use after 3 attempts."
        exit 1
    fi
done

# Verify port is free
echo "Verifying port 8000 is free..."
if lsof -i :8000 -t > /dev/null; then
    echo "Error: Port 8000 is still in use after attempting to free it."
    exit 1
else
    echo "Port 8000 is now free."
fi

# Set up systemd service for Gunicorn
echo "Setting up systemd service for Gunicorn..."
cat > /etc/systemd/system/music_scheduler_gunicorn.service << 'EOF'
[Unit]
Description=Gunicorn instance to serve Music Scheduler
After=network.target

[Service]
User=musicu
Group=www-data
WorkingDirectory=/music_scheduler
Environment="PATH=/music_scheduler/venv/bin"
ExecStart=/music_scheduler/venv/bin/gunicorn -b 127.0.0.1:8000 -w 4 app:app --log-file=/music_scheduler/logs/flask_app.log --log-level=info

[Install]
WantedBy=multi-user.target
EOF

# Reload systemd, enable, and restart the service
systemctl daemon-reload
systemctl enable music_scheduler_gunicorn
systemctl stop music_scheduler_gunicorn 2>/dev/null || true
systemctl start music_scheduler_gunicorn
if [ $? -ne 0 ]; then
    echo "Error: Failed to start Gunicorn service"
    journalctl -u music_scheduler_gunicorn.service -n 20 --no-pager
    exit 1
fi

# Check Gunicorn service status
echo "Checking Gunicorn service status..."
systemctl status music_scheduler_gunicorn | grep 'Active:'
journalctl -u music_scheduler_gunicorn.service -n 20 --no-pager

if systemctl --quiet is-active music_scheduler_gunicorn; then
    echo "Gunicorn service is running."
else
    echo "Error: Gunicorn service failed to start."
    exit 1
fi

echo "Backend setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_backend.log"
