@app.route('/api/lessons', methods=['GET', 'POST'])
def manage_lessons():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/lessons")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, role FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    user_id, role = user

    if role != 'admin':
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/lessons by user {username} with role {role}")
        return jsonify({'error': 'Forbidden'}), 403

    if request.method == 'GET':
        try:
            cursor.execute("""
                SELECT l.id, s.name AS student_name, l.instructor_id, l.lesson_date, l.lesson_time, l.duration, l.instrument, l.reminder_enabled, l.notes
                FROM lessons l
                JOIN students s ON l.student_id = s.id
            """)
            lessons = cursor.fetchall()
            cursor.close()
            conn.close()
            return jsonify({'lessons': [
                {
                    'id': l[0],
                    'student_name': l[1],
                    'instructor_id': l[2],
                    'lesson_date': str(l[3]),
                    'lesson_time': str(l[4]),
                    'duration': l[5],
                    'instrument': l[6],
                    'reminder_enabled': l[7],
                    'notes': l[8]
                } for l in lessons
            ]})
        except mysql.connector.Error as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to fetch lessons: {str(e)}")
            return jsonify({'error': 'Failed to fetch lessons: ' + str(e)}), 500

    if request.method == 'POST':
        data = request.get_json()
        logging.info(f"Received lesson creation request: {data}")
        student_id = data.get('student_id')
        instructor_id = data.get('instructor_id')
        lesson_date = data.get('lesson_date')
        lesson_time = data.get('lesson_time')
        duration = data.get('duration')
        instrument = data.get('instrument')
        reminder_enabled = data.get('reminder_enabled', False)

        if not all([student_id, instructor_id, lesson_date, lesson_time, duration, instrument]):
            cursor.close()
            conn.close()
            logging.warning("Missing fields in lesson creation request")
            return jsonify({'error': 'Missing fields'}), 400

        # Check if the lesson date and time are in the future
        lesson_start = datetime.strptime(f"{lesson_date} {lesson_time}", "%Y-%m-%d %H:%M")
        current_time = datetime.now()
        if lesson_start <= current_time:
            cursor.close()
            conn.close()
            logging.warning(f"Attempt to schedule lesson in the past on {lesson_date} at {lesson_time}")
            return jsonify({'error': 'Cannot schedule a lesson in the past.'}), 400

        # Parse lesson start and end times
        lesson_end = lesson_start + timedelta(minutes=int(duration))
        lesson_end_with_buffer = lesson_end + timedelta(minutes=5)  # Add 5-minute buffer

        # Check for overlapping lessons
        cursor.execute("""
            SELECT lesson_date, lesson_time, duration
            FROM lessons
            WHERE instructor_id = %s AND lesson_date = %s
        """, (instructor_id, lesson_date))
        existing_lessons = cursor.fetchall()

        for existing in existing_lessons:
            existing_start = datetime.strptime(f"{existing[0]} {existing[1]}", "%Y-%m-%d %H:%M:%S")
            existing_end = existing_start + timedelta(minutes=int(existing[2]))
            existing_end_with_buffer = existing_end + timedelta(minutes=5)

            # Check if the new lesson starts within an existing lesson or within 5 minutes after
            if (lesson_start >= existing_start and lesson_start < existing_end_with_buffer) or \
               (lesson_end > existing_start and lesson_end <= existing_end_with_buffer) or \
               (lesson_start <= existing_start and lesson_end >= existing_end):
                cursor.close()
                conn.close()
                logging.warning(f"Lesson scheduling conflict for instructor {instructor_id} on {lesson_date} at {lesson_time}")
                return jsonify({'error': 'Instructor has a conflicting lesson at this time or within 5 minutes after.'}), 400

        try:
            cursor.execute("""
                INSERT INTO lessons (student_id, instructor_id, lesson_date, lesson_time, duration, instrument, reminder_enabled)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (student_id, instructor_id, lesson_date, lesson_time, duration, instrument, reminder_enabled))
            conn.commit()

            # Send reminders if enabled
            if reminder_enabled:
                cursor.execute("SELECT name, email, phone FROM students WHERE id = %s", (student_id,))
                student = cursor.fetchone()
                if student:
                    student_name, email, phone = student
                    lesson_datetime = f"{lesson_date} {lesson_time}"
                    body = f"Reminder: You have a {instrument} lesson with your instructor on {lesson_datetime} (Duration: {duration} minutes)."
                    if email:
                        send_email(email, "Lesson Reminder", body)
                    if phone:
                        send_sms(phone, body)

            cursor.close()
            conn.close()
            logging.info(f"Lesson created for student {student_id} by {username}")
            return jsonify({'message': 'Lesson created'})
        except Exception as e:
            cursor.close()
            conn.close()
            logging.error(f"Failed to create lesson: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/my-lessons', methods=['GET'])
def get_my_lessons():
    username = session.get('username')
    if not username:
        logging.warning("Unauthorized access attempt to /api/my-lessons")
        return jsonify({'error': 'Unauthorized'}), 401

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE username = %s AND role = 'instructor'", (username,))
    instructor = cursor.fetchone()

    if not instructor:
        cursor.close()
        conn.close()
        logging.warning(f"Forbidden access to /api/my-lessons by user {username}")
        return jsonify({'error': 'Forbidden'}), 403

    instructor_id = instructor[0]
    try:
        cursor.execute("""
            SELECT l.id, s.name AS student_name, l.lesson_date, l.lesson_time, l.duration, l.instrument, l.notes
            FROM lessons l
            JOIN students s ON l.student_id = s.id
            WHERE l.instructor_id = %s
        """, (instructor_id,))
        lessons = cursor.fetchall()
        cursor.close()
        conn.close()
        logging.info(f"Retrieved lessons for instructor {username}")
        return jsonify({'lessons': [
            {
                'id': l[0],
                'student_name': l[1],
                'lesson_date': str(l[2]),
                'lesson_time': str(l[3]),
                'duration': l[4],
                'instrument': l[5],
                'notes': l[6]
            } for l in lessons
        ]})
    except mysql.connector.Error as e:
        cursor.close()
        conn.close()
        logging.error(f"Failed to fetch lessons: {str(e)}")
        return jsonify({'error': 'Failed to fetch lessons: ' + str(e)}), 500
