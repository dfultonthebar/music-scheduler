#!/bin/bash

echo "Starting setup_database.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_database.log) 2>&1

echo "Debug: Logging initialized for setup_database.sh"

# Set MySQL root password and secure installation
echo "Setting MySQL root password and securing installation..."
mysql -u root -pMusicU2025 -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'MusicU2025';" || {
    echo "Failed to set root password. Trying alternative method..."
    mysql -u root -pMusicU2025 -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MusicU2025');"
    if [ $? -ne 0 ]; then
        echo "Error: Unable to set MySQL root password."
        exit 1
    fi
}

# Drop and recreate database (disable foreign key checks to avoid constraints)
echo "Dropping and recreating database..."
mysql -u root -pMusicU2025 -e "SET FOREIGN_KEY_CHECKS = 0; DROP DATABASE IF EXISTS music_scheduler; SET FOREIGN_KEY_CHECKS = 1;"
mysql -u root -pMusicU2025 -e "CREATE DATABASE music_scheduler;"

# Create MySQL user
echo "Creating MySQL user..."
mysql -u root -pMusicU2025 -e "CREATE USER IF NOT EXISTS 'musicu'@'localhost' IDENTIFIED BY 'MusicU2025';"
mysql -u root -pMusicU2025 -e "GRANT ALL PRIVILEGES ON music_scheduler.* TO 'musicu'@'localhost';"
mysql -u root -pMusicU2025 -e "FLUSH PRIVILEGES;"

# Create database tables
echo "Creating database tables..."
mysql -u root -pMusicU2025 music_scheduler << 'EOF'
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'instructor') NOT NULL
);

CREATE TABLE IF NOT EXISTS lessons (
    id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT NOT NULL,
    student_name VARCHAR(100) NOT NULL,
    lesson_date DATE NOT NULL,
    lesson_time TIME NOT NULL,
    duration INT NOT NULL,
    FOREIGN KEY (instructor_id) REFERENCES users(id)
);
EOF

# Insert initial data with the correct bcrypt hash for 'MusicU2025'
echo "Verifying initial data..."
mysql -u root -pMusicU2025 music_scheduler << 'EOF'
INSERT IGNORE INTO users (username, password, role) VALUES
('admin', '$2b$12$zHOabqhyJZy9olvDHKzvXemTqmLxTDrEg1hg/6VjAc/l7U5DuJ9/i', 'admin'),
('instructor1', '$2b$12$zHOabqhyJZy9olvDHKzvXemTqmLxTDrEg1hg/6VjAc/l7U5DuJ9/i', 'instructor');

SELECT username, role FROM users;
EOF

echo "Database setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_database.log"
