#!/bin/bash

echo "Starting setup_database.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_database.log) 2>&1

echo "Debug: Logging initialized for setup_database.sh"

# Ensure MySQL service is stopped
echo "Stopping MySQL service..."
systemctl stop mysql

# Check MySQL root user authentication method
echo "Checking MySQL root user authentication method..."
if mysql -uroot -e "SELECT 1;" 2>/dev/null; then
    echo "Root user accessible without password, setting password..."
    mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY 'MusicU2025';"
elif mysql -uroot -pMusicU2025 -e "SELECT 1;" 2>/dev/null; then
    echo "Root user already has the correct password."
else
    echo "Root user password needs reset, starting MySQL in safe mode..."
    mysqld_safe --skip-grant-tables &
    sleep 5
    mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY 'MusicU2025';"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to reset MySQL root password"
        pkill mysqld_safe
        exit 1
    fi
    pkill mysqld_safe
    sleep 5
fi

# Start MySQL normally
echo "Starting MySQL normally..."
systemctl start mysql

# Verify MySQL is running
if ! systemctl is-active --quiet mysql; then
    echo "Error: MySQL failed to start"
    journalctl -u mysql -n 20 --no-pager
    exit 1
fi

# Secure MySQL installation non-interactively
echo "Securing MySQL installation..."
mysql -uroot -pMusicU2025 -e "DELETE FROM mysql.user WHERE User='';"
mysql -uroot -pMusicU2025 -e "DROP DATABASE IF EXISTS test;"
mysql -uroot -pMusicU2025 -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
mysql -uroot -pMusicU2025 -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY 'MusicU2025';"
mysql -uroot -pMusicU2025 -e "FLUSH PRIVILEGES;"

# Drop and recreate database
echo "Dropping and recreating database..."
mysql -uroot -pMusicU2025 -e "DROP DATABASE IF EXISTS musicu_db;" || {
    echo "Error: Failed to drop database"
    exit 1
}
mysql -uroot -pMusicU2025 -e "CREATE DATABASE musicu_db;" || {
    echo "Error: Failed to create database"
    exit 1
}

# Create MySQL user
echo "Creating MySQL user..."
mysql -uroot -pMusicU2025 -e "CREATE USER IF NOT EXISTS 'musicu_user'@'localhost' IDENTIFIED BY 'MusicU2025';" || {
    echo "Error: Failed to create MySQL user"
    exit 1
}
mysql -uroot -pMusicU2025 -e "GRANT ALL PRIVILEGES ON musicu_db.* TO 'musicu_user'@'localhost';" || {
    echo "Error: Failed to grant privileges"
    exit 1
}
mysql -uroot -pMusicU2025 -e "FLUSH PRIVILEGES;" || {
    echo "Error: Failed to flush privileges"
    exit 1
}

# Create database tables
echo "Creating database tables..."
mysql -umusicu_user -pMusicU2025 musicu_db <<EOF
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'instructor') NOT NULL
);

CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(255),
    instrument VARCHAR(255),
    created_by INT,
    FOREIGN KEY (created_by) REFERENCES users(id)
);

CREATE TABLE lessons (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    instructor_id INT,
    lesson_date DATE NOT NULL,
    lesson_time TIME NOT NULL,
    duration INT NOT NULL,
    instrument VARCHAR(255) NOT NULL,
    reminder_enabled BOOLEAN DEFAULT FALSE,
    notes TEXT,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (instructor_id) REFERENCES users(id)
);

CREATE TABLE instructor_availability (
    id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT,
    day_of_week ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    FOREIGN KEY (instructor_id) REFERENCES users(id)
);

CREATE TABLE instructor_time_off (
    id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (instructor_id) REFERENCES users(id)
);

CREATE TABLE instructor_instruments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT,
    instrument VARCHAR(255) NOT NULL,
    FOREIGN KEY (instructor_id) REFERENCES users(id)
);
EOF

if [ $? -ne 0 ]; then
    echo "Error: Failed to create database tables"
    exit 1
fi

# Hash passwords for initial users
echo "Hashing passwords for initial users..."
SALT=$(python3 -c "import bcrypt; print(bcrypt.gensalt().decode('utf-8'))")
echo "Fixed salt used: $SALT"
ADMIN_HASH=$(python3 -c "import bcrypt; print(bcrypt.hashpw(b'MusicU2025', b'$SALT').decode('utf-8'))")
echo "Hashed password for admin: $ADMIN_HASH"
INSTRUCTOR_HASH=$(python3 -c "import bcrypt; print(bcrypt.hashpw(b'MusicU2025', b'$SALT').decode('utf-8'))")
echo "Hashed password for instructor1: $INSTRUCTOR_HASH"

# Insert initial users
mysql -umusicu_user -pMusicU2025 musicu_db <<EOF
INSERT INTO users (username, password, role) VALUES ('admin', '$ADMIN_HASH', 'admin');
INSERT INTO users (username, password, role) VALUES ('instructor1', '$INSTRUCTOR_HASH', 'instructor');
EOF

if [ $? -ne 0 ]; then
    echo "Error: Failed to insert initial users"
    exit 1
fi

# Verify initial data
echo "Verifying initial data..."
mysql -umusicu_user -pMusicU2025 musicu_db -e "SELECT username, role FROM users;"

echo "Database setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_database.log"
