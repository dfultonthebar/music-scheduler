#!/bin/bash

echo "Starting setup_config.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_config.log) 2>&1

echo "Debug: Logging initialized for setup_config.sh"

cd /music_scheduler

# Update index.jsx with ConfigPage
echo "Updating index.jsx with ConfigPage..."
cat << 'EOF' > index.jsx
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import './src/index.css';

const API_BASE_URL = 'http://192.168.1.63';

const ConfigPage = ({ token, setView }) => {
  const [config, setConfig] = useState({
    smtp_server: '',
    smtp_port: '',
    smtp_user: '',
    smtp_password: '',
    twilio_account_sid: '',
    twilio_auth_token: '',
    twilio_phone_number: ''
  });

  useEffect(() => {
    (async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/config`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const data = await response.json();
        setConfig(data);
      } catch (error) {
        console.error('Error fetching config:', error);
        alert('Error fetching config: ' + error.message);
      }
    })();
  }, [token]);

  const handleChange = (e) => {
    setConfig({ ...config, [e.target.name]: e.target.value });
  };

  const handleSubmit = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/config`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(config)
      });
      const result = await response.json();
      alert(result.message);
      setView('dashboard');
    } catch (error) {
      console.error('Error updating config:', error);
      alert('Error updating config: ' + error.message);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    window.location.reload();
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl mb-4">Configuration</h1>
      <button onClick={handleLogout} className="bg-red-500 text-white p-2 rounded mb-4">Log Out</button>
      <div className="mb-4">
        <label className="block mb-1">SMTP Server</label>
        <input type="text" name="smtp_server" value={config.smtp_server} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <div className="mb-4">
        <label className="block mb-1">SMTP Port</label>
        <input type="number" name="smtp_port" value={config.smtp_port} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <div className="mb-4">
        <label className="block mb-1">SMTP User</label>
        <input type="text" name="smtp_user" value={config.smtp_user} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <div className="mb-4">
        <label className="block mb-1">SMTP Password</label>
        <input type="password" name="smtp_password" value={config.smtp_password} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <div className="mb-4">
        <label className="block mb-1">Twilio Account SID</label>
        <input type="text" name="twilio_account_sid" value={config.twilio_account_sid} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <div className="mb-4">
        <label className="block mb-1">Twilio Auth Token</label>
        <input type="password" name="twilio_auth_token" value={config.twilio_auth_token} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <div className="mb-4">
        <label className="block mb-1">Twilio Phone Number</label>
        <input type="text" name="twilio_phone_number" value={config.twilio_phone_number} onChange={handleChange} className="border p-2 w-full" />
      </div>
      <button onClick={handleSubmit} className="bg-blue-500 text-white p-2 rounded mr-2">Save</button>
      <button onClick={() => setView('dashboard')} className="bg-gray-500 text-white p-2 rounded">Back</button>
    </div>
  );
};

const App = () => {
  const [view, setView] = useState('config');
  const token = localStorage.getItem('token');

  return (
    <div>
      {view === 'config' && <ConfigPage token={token} setView={setView} />}
    </div>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
EOF

# Rebuild React app with ConfigPage
echo "Rebuilding React app with ConfigPage..."
npm run build
if [ $? -ne 0 ]; then
    echo "Error: Vite build failed for ConfigPage. Check logs for details."
    exit 1
fi

# Rebuild Tailwind CSS
echo "Rebuilding Tailwind CSS..."
npx tailwindcss -i src/index.css -o static/tailwind.css --minify
if [ $? -ne 0 ]; then
    echo "Error: Tailwind CSS rebuild failed. Check logs for details."
    exit 1
fi
echo "tailwind.css successfully rebuilt."
ls -l static/tailwind.css

# Update index.html with the latest JS and CSS files
echo "Updating index.html with latest JS and CSS files..."
LATEST_CSS=$(ls -t /music_scheduler/static/assets/index-*.css | head -n 1 | xargs basename 2>/dev/null || echo "")
LATEST_JS=$(ls -t /music_scheduler/static/assets/index-*.js | head -n 1 | xargs basename 2>/dev/null || echo "")
if [ -n "$LATEST_CSS" ] && [ -n "$LATEST_JS" ]; then
    sed -i "s|<link rel=\"stylesheet\" href=\"/static/tailwind.css\">.*|<link rel=\"stylesheet\" href=\"/static/tailwind.css\">\n  <link rel=\"stylesheet\" href=\"/static/assets/$LATEST_CSS\">|" /music_scheduler/index.html
    sed -i "s|<script type=\"module\" src=\"/static/assets/.*\.js\">|<script type=\"module\" src=\"/static/assets/$LATEST_JS\">|" /music_scheduler/index.html
    echo "$LATEST_CSS"
    echo "$LATEST_JS"
else
    echo "Warning: Could not find latest CSS or JS files to update index.html. Continuing..."
fi

echo "Config setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_config.log"
