#!/bin/bash

echo "Starting setup_instructor.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_instructor.log) 2>&1

echo "Debug: Logging initialized for setup_instructor.sh"

# Update index.jsx with InstructorDashboard
echo "Updating index.jsx with InstructorDashboard..."
cat > /music_scheduler/src/index.jsx << 'EOF'
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import { Calendar, dateFnsLocalizer } from 'react-big-calendar';
import { format, parse, startOfWeek, getDay } from 'date-fns';
import 'react-big-calendar/lib/css/react-big-calendar.css';

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
});

const App = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [role, setRole] = useState(null);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [lessons, setLessons] = useState([]);
  const [availability, setAvailability] = useState([]);
  const [instruments, setInstruments] = useState([]);
  const [newAvailability, setNewAvailability] = useState({ day_of_week: '', start_time: '', end_time: '' });
  const [newInstrument, setNewInstrument] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    fetch('/api/check-auth')
      .then(res => res.json())
      .then(data => {
        setIsAuthenticated(data.authenticated);
        setRole(data.role);
        if (data.authenticated && data.role === 'instructor') {
          fetchLessons();
          fetchAvailability();
          fetchInstruments();
        }
      })
      .catch(err => setError('Failed to check authentication'));
  }, []);

  const fetchLessons = async () => {
    try {
      const res = await fetch('/api/my-lessons');
      const data = await res.json();
      setLessons(data.lessons.map(lesson => ({
        ...lesson,
        start: new Date(`${lesson.lesson_date}T${lesson.lesson_time}`),
        end: new Date(new Date(`${lesson.lesson_date}T${lesson.lesson_time}`).getTime() + lesson.duration * 60000),
        title: `${lesson.student_name} - ${lesson.instrument}`,
      })));
    } catch (err) {
      setError('Failed to fetch lessons');
    }
  };

  const fetchAvailability = async () => {
    try {
      const res = await fetch('/api/availability');
      const data = await res.json();
      setAvailability(data.availability);
    } catch (err) {
      setError('Failed to fetch availability');
    }
  };

  const fetchInstruments = async () => {
    try {
      const res = await fetch('/api/instruments');
      const data = await res.json();
      setInstruments(data.instruments);
    } catch (err) {
      setError('Failed to fetch instruments');
    }
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });
      const data = await res.json();
      if (data.authenticated) {
        setIsAuthenticated(true);
        setRole(data.role);
        setError('');
        if (data.role === 'instructor') {
          fetchLessons();
          fetchAvailability();
          fetchInstruments();
        }
      } else {
        setError('Invalid credentials');
      }
    } catch (err) {
      setError('Failed to login');
    }
  };

  const handleLogout = async () => {
    try {
      await fetch('/api/logout', { method: 'POST' });
      setIsAuthenticated(false);
      setRole(null);
    } catch (err) {
      setError('Failed to logout');
    }
  };

  const handleAddAvailability = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('/api/availability', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newAvailability),
      });
      const data = await res.json();
      if (data.message) {
        setNewAvailability({ day_of_week: '', start_time: '', end_time: '' });
        fetchAvailability();
        setError('');
      } else {
        setError(data.error || 'Failed to add availability');
      }
    } catch (err) {
      setError('Failed to add availability');
    }
  };

  const handleAddInstrument = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('/api/instruments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ instrument: newInstrument }),
      });
      const data = await res.json();
      if (data.message) {
        setNewInstrument('');
        fetchInstruments();
        setError('');
      } else {
        setError(data.error || 'Failed to add instrument');
      }
    } catch (err) {
      setError('Failed to add instrument');
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-3xl font-bold mb-4">Music Lesson Scheduler</h1>
        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <label className="block">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="border p-2 w-full"
            />
          </div>
          <div>
            <label className="block">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="border p-2 w-full"
            />
          </div>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded">Login</button>
          {error && <p className="text-red-500">{error}</p>}
        </form>
      </div>
    );
  }

  if (role === 'instructor') {
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-3xl font-bold mb-4">Instructor Dashboard</h1>
        <button onClick={handleLogout} className="bg-red-500 text-white p-2 rounded mb-4">Logout</button>
        {error && <p className="text-red-500 mb-4">{error}</p>}

        <h2 className="text-2xl font-semibold mb-2">My Lessons</h2>
        <Calendar
          localizer={localizer}
          events={lessons}
          startAccessor="start"
          endAccessor="end"
          style={{ height: 500 }}
          className="mb-4"
        />

        <h2 className="text-2xl font-semibold mb-2">Set Availability</h2>
        <form onSubmit={handleAddAvailability} className="space-y-4 mb-4">
          <div>
            <label className="block">Day of Week</label>
            <select
              value={newAvailability.day_of_week}
              onChange={(e) => setNewAvailability({ ...newAvailability, day_of_week: e.target.value })}
              className="border p-2 w-full"
            >
              <option value="">Select Day</option>
              <option value="Monday">Monday</option>
              <option value="Tuesday">Tuesday</option>
              <option value="Wednesday">Wednesday</option>
              <option value="Thursday">Thursday</option>
              <option value="Friday">Friday</option>
              <option value="Saturday">Saturday</option>
              <option value="Sunday">Sunday</option>
            </select>
          </div>
          <div>
            <label className="block">Start Time</label>
            <input
              type="time"
              value={newAvailability.start_time}
              onChange={(e) => setNewAvailability({ ...newAvailability, start_time: e.target.value })}
              className="border p-2 w-full"
            />
          </div>
          <div>
            <label className="block">End Time</label>
            <input
              type="time"
              value={newAvailability.end_time}
              onChange={(e) => setNewAvailability({ ...newAvailability, end_time: e.target.value })}
              className="border p-2 w-full"
            />
          </div>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded">Add Availability</button>
        </form>
        <ul className="mb-4">
          {availability.map(slot => (
            <li key={slot.id} className="border-b py-2">
              {slot.day_of_week}: {slot.start_time} - {slot.end_time}
            </li>
          ))}
        </ul>

        <h2 className="text-2xl font-semibold mb-2">Instruments I Teach</h2>
        <form onSubmit={handleAddInstrument} className="space-y-4 mb-4">
          <div>
            <label className="block">Instrument</label>
            <input
              type="text"
              value={newInstrument}
              onChange={(e) => setNewInstrument(e.target.value)}
              className="border p-2 w-full"
            />
          </div>
          <button type="submit" className="bg-blue-500 text-white p-2 rounded">Add Instrument</button>
        </form>
        <ul>
          {instruments.map(item => (
            <li key={item.id} className="border-b py-2">{item.instrument}</li>
          ))}
        </ul>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Music Lesson Scheduler</h1>
      <p>Welcome, {username}! Your role: {role}</p>
      <button onClick={handleLogout} className="bg-red-500 text-white p-2 rounded mt-4">Logout</button>
      {error && <p className="text-red-500">{error}</p>}
    </div>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
EOF

# Create index.html for Vite
echo "Recreating index.html for Vite..."
cat > /music_scheduler/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Music Lesson Scheduler</title>
  <link rel="stylesheet" href="/static/tailwind.css">
  <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/index.jsx"></script>
</body>
</html>
EOF

# Rebuild React app with InstructorDashboard
echo "Rebuilding React app with InstructorDashboard..."
cd /music_scheduler
npm install react-big-calendar date-fns
npm run build

# Rebuild Tailwind CSS
echo "Rebuilding Tailwind CSS..."
npx tailwindcss -i /music_scheduler/src/index.css -o /music_scheduler/static/tailwind.css --minify
if [ -f /music_scheduler/static/tailwind.css ]; then
  echo "tailwind.css successfully rebuilt."
  ls -l /music_scheduler/static/tailwind.css
else
  echo "Error: tailwind.css not created."
  exit 1
fi

# Remove incorrect index.html from /music_scheduler/
echo "Removing incorrect index.html from /music_scheduler/..."
rm -f /music_scheduler/index.html

echo "Instructor setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_instructor.log"
