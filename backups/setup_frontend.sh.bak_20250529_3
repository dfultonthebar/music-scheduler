#!/bin/bash

echo "Starting setup_frontend.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_frontend.log) 2>&1

echo "Debug: Logging initialized for setup_frontend.sh"

# Fix ownership and permissions of node_modules
echo "Fixing ownership and permissions of node_modules..."
if [ -d "/music_scheduler/node_modules" ]; then
    chown -R musicu:www-data /music_scheduler/node_modules
    chmod -R 755 /music_scheduler/node_modules
fi

# Remove existing node_modules, package-lock.json, and old build artifacts
echo "Removing existing node_modules, package-lock.json, and old build artifacts..."
rm -rf /music_scheduler/node_modules /music_scheduler/package-lock.json /music_scheduler/static

# Set up base React app structure
echo "Setting up base React app structure..."
mkdir -p /music_scheduler/src /music_scheduler/static

# Create src/index.jsx
echo "Creating src/index.jsx..."
cat > /music_scheduler/src/index.jsx << 'EOF'
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';

const App = () => {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Music Lesson Scheduler</h1>
      <p>Welcome to the Music Lesson Scheduler!</p>
    </div>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
EOF

# Create src/index.css
echo "Creating src/index.css..."
cat > /music_scheduler/src/index.css << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;
EOF

# Create tailwind.config.js
echo "Creating tailwind.config.js..."
cat > /music_scheduler/tailwind.config.js << 'EOF'
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{jsx,js}', './index.html'],
  theme: {
    extend: {},
  },
  plugins: [],
}
EOF

# Create vite.config.js
echo "Creating vite.config.js..."
cat > /music_scheduler/vite.config.js << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'static',
  },
  server: {
    host: '0.0.0.0',
    port: 3000,
  },
})
EOF

# Create package.json
echo "Creating package.json..."
cat > /music_scheduler/package.json << 'EOF'
{
  "name": "music_scheduler",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwindcss": "^3.4.1"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.1",
    "vite": "^6.3.5"
  }
}
EOF

# Create index.html for Vite
echo "Creating index.html for Vite..."
cat > /music_scheduler/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Music Lesson Scheduler</title>
  <link rel="stylesheet" href="/static/tailwind.css">
  <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/index.jsx"></script>
</body>
</html>
EOF

# Clear npm cache thoroughly
echo "Clearing npm cache..."
npm cache clean --force
rm -rf ~/.npm  # Clear global npm cache

# Install dependencies
echo "Installing dependencies..."
cd /music_scheduler
npm install

# Force update of caniuse-lite to suppress Browserslist warning
echo "Forcing update of caniuse-lite..."
npx update-browserslist-db@latest --force
# Clear Tailwind CSS cache to ensure it uses the updated database
rm -rf /music_scheduler/node_modules/.cache

# Build React app (initial build with placeholders)
echo "Building React app (initial build with placeholders)..."
npm run build

# Build Tailwind CSS
echo "Building Tailwind CSS..."
npx tailwindcss -i /music_scheduler/src/index.css -o /music_scheduler/static/tailwind.css --minify
if [ -f /music_scheduler/static/tailwind.css ]; then
  echo "tailwind.css successfully created."
  ls -l /music_scheduler/static/tailwind.css
else
  echo "Error: tailwind.css not created."
  exit 1
fi

# Download favicon.ico
echo "Downloading favicon.ico..."
curl -o /music_scheduler/static/favicon.ico https://www.google.com/favicon.ico

# Verify favicon.ico presence
echo "Verifying favicon.ico presence..."
if [ -f /music_scheduler/static/favicon.ico ]; then
  echo "favicon.ico successfully created."
  ls -l /music_scheduler/static/favicon.ico
else
  echo "Error: favicon.ico not found."
  exit 1
fi

# Remove incorrect index.html from /music_scheduler/
echo "Removing incorrect index.html from /music_scheduler/..."
rm -f /music_scheduler/index.html

echo "Frontend setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_frontend.log"
