#!/bin/bash

echo "Starting setup_backend.sh logging at $(date)"
exec > >(tee -a /music_scheduler/logs/setup_backend.log) 2>&1

echo "Debug: Logging initialized for setup_backend.sh"

# Create config.json with placeholder settings
echo "Creating config.json with placeholder email and SMS settings..."
cat << 'EOF' > /music_scheduler/config.json
{
  "smtp_server": "smtp.example.com",
  "smtp_port": 587,
  "smtp_user": "user@example.com",
  "smtp_password": "password",
  "twilio_account_sid": "your_account_sid",
  "twilio_auth_token": "your_auth_token",
  "twilio_phone_number": "+1234567890"
}
EOF

# Create app.py with updated schema handling
echo "Creating app.py..."
cat << 'EOF' > /music_scheduler/app.py
from flask import Flask, jsonify, request
import mysql.connector
import logging
import jwt
import datetime
import json
import os

app = Flask(__name__, static_folder='static', static_url_path='/static')

# Configure logging
logging.basicConfig(filename='/music_scheduler/logs/flask_app.log', level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(message)s')

# Database configuration
def get_db():
    try:
        return mysql.connector.connect(
            host="localhost",
            user="musicu",
            password="MusicU2025",
            database="music_scheduler"
        )
    except mysql.connector.Error as e:
        logging.error(f"Database connection failed: {str(e)}")
        raise

# Token authentication
def authenticate_token():
    token = request.headers.get('Authorization')
    if not token:
        logging.warning("No Authorization header provided")
        return None
    if not token.startswith('Bearer '):
        logging.warning(f"Invalid Authorization header format: {token}")
        return None
    token = token.split(' ')[1]
    try:
        return jwt.decode(token, 'MusicU2025SecretKey', algorithms=['HS256'])
    except jwt.InvalidTokenError as e:
        logging.error(f"Token authentication failed: {str(e)}")
        return None

# Routes
@app.route('/')
def index():
    return app.send_static_file('index.html')

@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    try:
        with get_db() as conn:
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT id, username, role FROM users WHERE username = %s AND password = %s", (username, password))
            user = cursor.fetchone()
    except Exception as e:
        logging.error(f"Error during login query: {str(e)}")
        return jsonify({'error': 'Server error during login'}), 500
    
    if not user:
        logging.warning(f"Failed login attempt for username: {username}")
        return jsonify({'error': 'Invalid credentials'}), 401
    
    token = jwt.encode({
        'id': user['id'],
        'role': user['role'],
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
    }, 'MusicU2025SecretKey', algorithm='HS256')
    
    logging.info(f"Successful login for user: {username}, role: {user['role']}")
    return jsonify({'token': token, 'role': user['role']})

@app.route('/api/config', methods=['GET', 'POST'])
def manage_config():
    user = authenticate_token()
    if not user or user['role'] != 'admin':
        logging.warning(f"Unauthorized access attempt to /api/config by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    config_path = '/music_scheduler/config.json'
    if request.method == 'GET':
        with open(config_path, 'r') as f:
            config = json.load(f)
        return jsonify(config)
    else:
        data = request.get_json()
        with open(config_path, 'w') as f:
            json.dump(data, f, indent=2)
        logging.info("Configuration updated by admin")
        return jsonify({'message': 'Configuration updated'})

@app.route('/api/users', methods=['GET', 'POST', 'PUT', 'DELETE'])
def manage_users():
    user = authenticate_token()
    if not user or user['role'] != 'admin':
        logging.warning(f"Unauthorized access attempt to /api/users by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    with get_db() as conn:
        cursor = conn.cursor(dictionary=True)
        if request.method == 'GET':
            cursor.execute("SELECT id, username, role, name, cell_phone FROM users")
            users = cursor.fetchall()
            logging.info("Fetched all users")
            return jsonify(users)
        elif request.method == 'POST':
            data = request.get_json()
            cursor.execute("""
                INSERT INTO users (username, password, role, name, cell_phone)
                VALUES (%s, %s, 'instructor', %s, %s)
            """, (data['username'], data['password'], data['name'], data['cell_phone']))
            conn.commit()
            logging.info(f"Added user: {data['username']}")
            return jsonify({'message': 'User added'})
        elif request.method == 'PUT':
            data = request.get_json()
            cursor.execute("""
                UPDATE users
                SET username = %s, name = %s, cell_phone = %s
                WHERE id = %s
            """, (data['username'], data['name'], data['cell_phone'], data['id']))
            conn.commit()
            logging.info(f"Updated user with id: {data['id']}")
            return jsonify({'message': 'User updated'})
        else:
            data = request.get_json()
            cursor.execute("DELETE FROM users WHERE id = %s", (data['id'],))
            conn.commit()
            logging.info(f"Removed user with id: {data['id']}")
            return jsonify({'message': 'User removed'})

@app.route('/api/students', methods=['GET', 'POST', 'PUT', 'DELETE'])
def manage_students():
    user = authenticate_token()
    if not user or user['role'] != 'admin':
        logging.warning(f"Unauthorized access attempt to /api/students by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    with get_db() as conn:
        cursor = conn.cursor(dictionary=True)
        if request.method == 'GET':
            cursor.execute("SELECT * FROM students")
            students = cursor.fetchall()
            logging.info("Fetched all students")
            return jsonify(students)
        elif request.method == 'POST':
            data = request.get_json()
            cursor.execute("""
                INSERT INTO students (name, instrument, cell_phone, email)
                VALUES (%s, %s, %s, %s)
            """, (data['name'], data['instrument'], data['cell_phone'], data['email']))
            conn.commit()
            logging.info(f"Added student: {data['name']}")
            return jsonify({'message': 'Student added'})
        elif request.method == 'PUT':
            data = request.get_json()
            cursor.execute("""
                UPDATE students
                SET name = %s, instrument = %s, cell_phone = %s, email = %s
                WHERE id = %s
            """, (data['name'], data['instrument'], data['cell_phone'], data['email'], data['id']))
            conn.commit()
            logging.info(f"Updated student with id: {data['id']}")
            return jsonify({'message': 'Student updated'})
        else:
            data = request.get_json()
            cursor.execute("DELETE FROM students WHERE id = %s", (data['id'],))
            conn.commit()
            logging.info(f"Removed student with id: {data['id']}")
            return jsonify({'message': 'Student removed'})

@app.route('/api/instructors', methods=['GET'])
def get_instructors():
    user = authenticate_token()
    if not user or user['role'] != 'admin':
        logging.warning(f"Unauthorized access attempt to /api/instructors by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    with get_db() as conn:
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM instructors")
        instructors = cursor.fetchall()
        logging.info("Fetched all instructors")
        return jsonify(instructors)

@app.route('/api/my_students', methods=['GET'])
def get_my_students():
    user = authenticate_token()
    if not user or user['role'] != 'instructor':
        logging.warning(f"Unauthorized access attempt to /api/my_students by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    with get_db() as conn:
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT id FROM instructors WHERE user_id = %s", (user['id'],))
        instructor = cursor.fetchone()
        if not instructor:
            logging.error(f"Instructor not found for user_id: {user['id']}")
            return jsonify({'error': 'Instructor not found'}), 404

        cursor.execute("""
            SELECT s.*
            FROM students s
            JOIN student_instructor si ON s.id = si.student_id
            WHERE si.instructor_id = %s
        """, (instructor['id'],))
        students = cursor.fetchall()
        logging.info(f"Fetched students for instructor_id: {instructor['id']}")
        return jsonify(students)

@app.route('/api/instructor_availability', methods=['GET', 'POST', 'DELETE'])
def manage_availability():
    user = authenticate_token()
    if not user or user['role'] != 'instructor':
        logging.warning(f"Unauthorized access attempt to /api/instructor_availability by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    try:
        with get_db() as conn:
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT id FROM instructors WHERE user_id = %s", (user['id'],))
            instructor = cursor.fetchone()
            if not instructor:
                logging.error(f"Instructor not found for user_id: {user['id']}")
                return jsonify({'error': 'Instructor not found'}), 404
            instructor_id = instructor['id']

            if request.method == 'POST':
                data = request.get_json()
                if not all(key in data for key in ['day_of_week', 'start_time', 'end_time']):
                    logging.error(f"Missing required fields in POST request: {data}")
                    return jsonify({'error': 'Missing required fields'}), 400
                cursor.execute("""
                    INSERT INTO instructor_availability (instructor_id, day_of_week, start_time, end_time)
                    VALUES (%s, %s, %s, %s)
                """, (instructor_id, data['day_of_week'], data['start_time'], data['end_time']))
                conn.commit()
                logging.info(f"Added availability for instructor_id: {instructor_id}")
                return jsonify({'message': 'Availability added'})
            elif request.method == 'DELETE':
                data = request.get_json()
                if 'id' not in data:
                    logging.error(f"Missing 'id' in DELETE request: {data}")
                    return jsonify({'error': 'Missing id'}), 400
                cursor.execute("DELETE FROM instructor_availability WHERE id = %s AND instructor_id = %s",
                              (data['id'], instructor_id))
                conn.commit()
                logging.info(f"Removed availability with id: {data['id']} for instructor_id: {instructor_id}")
                return jsonify({'message': 'Availability removed'})
            else:
                cursor.execute("SELECT * FROM instructor_availability WHERE instructor_id = %s", (instructor_id,))
                availability = cursor.fetchall()
                # Convert start_time and end_time to strings to fix JSON serialization
                for slot in availability:
                    slot["start_time"] = str(slot["start_time"])
                    slot["end_time"] = str(slot["end_time"])
                logging.info(f"Fetched availability for instructor_id: {instructor_id}")
                return jsonify(availability)
    except Exception as e:
        logging.error(f"Exception in /api/instructor_availability: {str(e)}")
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@app.route('/api/lessons', methods=['GET', 'POST', 'PUT', 'PATCH'])
def manage_lessons():
    user = authenticate_token()
    if not user:
        logging.warning(f"Unauthorized access attempt to /api/lessons by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    with get_db() as conn:
        cursor = conn.cursor(dictionary=True)
        if user['role'] == 'instructor':
            cursor.execute("SELECT id FROM instructors WHERE user_id = %s", (user['id'],))
            instructor = cursor.fetchone()
            if not instructor:
                logging.error(f"Instructor not found for user_id: {user['id']}")
                return jsonify({'error': 'Instructor not found'}), 404
            instructor_id = instructor['id']
        else:
            instructor_id = None

        if request.method == 'GET':
            if user['role'] == 'instructor':
                cursor.execute("""
                    SELECT l.*, s.name as student_name, i.name as instructor_name
                    FROM lessons l
                    JOIN students s ON l.student_id = s.id
                    JOIN instructors i ON l.instructor_id = i.id
                    WHERE l.instructor_id = %s
                """, (instructor_id,))
            else:
                cursor.execute("""
                    SELECT l.*, s.name as student_name, i.name as instructor_name
                    FROM lessons l
                    JOIN students s ON l.student_id = s.id
                    JOIN instructors i ON l.instructor_id = i.id
                """)
            lessons = cursor.fetchall()
            logging.info(f"Fetched lessons for user: {user['id']}, role: {user['role']}")
            return jsonify(lessons)
        elif request.method == 'POST':
            data = request.get_json()
            lesson_instructor_id = data['instructor_id'] if user['role'] == 'admin' else instructor_id
            lesson_day = datetime.datetime.strptime(data['date_time'], '%Y-%m-%dT%H:%M').strftime('%A')
            lesson_start_time = datetime.datetime.strptime(data['date_time'], '%Y-%m-%dT%H:%M').time()
            lesson_end_time = (datetime.datetime.strptime(data['date_time'], '%Y-%m-%dT%H:%M') +
                              datetime.timedelta(hours=float(data['duration']))).time()

            cursor.execute("""
                SELECT * FROM instructor_availability
                WHERE instructor_id = %s AND day_of_week = %s
                AND start_time <= %s AND end_time >= %s
            """, (lesson_instructor_id, lesson_day, lesson_start_time, lesson_end_time))
            availability = cursor.fetchone()
            if not availability:
                logging.warning(f"No availability for instructor_id: {lesson_instructor_id} on {lesson_day}")
                return jsonify({'error': 'Instructor not available at this time'}), 400

            cursor.execute("""
                INSERT INTO lessons (student_id, instructor_id, instrument, date_time, duration, notes)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (data['student_id'], lesson_instructor_id, data['instrument'], data['date_time'],
                  data['duration'], data['notes']))
            conn.commit()
            logging.info(f"Scheduled lesson for student_id: {data['student_id']}, instructor_id: {lesson_instructor_id}")
            return jsonify({'message': 'Lesson scheduled'})
        else:
            data = request.get_json()
            lesson = data['lesson']
            lesson_day = datetime.datetime.strptime(lesson['date_time'], '%Y-%m-%dT%H:%M').strftime('%A')
            lesson_start_time = datetime.datetime.strptime(lesson['date_time'], '%Y-%m-%dT%H:%M').time()
            lesson_end_time = (datetime.datetime.strptime(lesson['date_time'], '%Y-%m-%dT%H:%M') +
                              datetime.timedelta(hours=float(lesson['duration']))).time()

            cursor.execute("""
                SELECT * FROM instructor_availability
                WHERE instructor_id = %s AND day_of_week = %s
                AND start_time <= %s AND end_time >= %s
            """, (lesson['instructor_id'], lesson_day, lesson_start_time, lesson_end_time))
            availability = cursor.fetchone()
            if not availability:
                logging.warning(f"No availability for instructor_id: {lesson['instructor_id']} on {lesson_day}")
                return jsonify({'error': 'Instructor not available at this time'}), 400

            cursor.execute("""
                UPDATE lessons
                SET student_id = %s, instructor_id = %s, instrument = %s, date_time = %s,
                    duration = %s, notes = %s
                WHERE id = %s
            """, (lesson['student_id'], lesson['instructor_id'], lesson['instrument'], lesson['date_time'],
                  lesson['duration'], lesson['notes'], lesson['id']))
            conn.commit()
            logging.info(f"Updated lesson with id: {lesson['id']}")
            return jsonify({'message': 'Lesson updated'})

@app.route('/api/assign_student', methods=['POST'])
def assign_student():
    user = authenticate_token()
    if not user or user['role'] != 'admin':
        logging.warning(f"Unauthorized access attempt to /api/assign_student by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    data = request.get_json()
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO student_instructor (student_id, instructor_id)
            VALUES (%s, %s)
        """, (data['student_id'], data['instructor_id']))
        conn.commit()
        logging.info(f"Assigned student_id: {data['student_id']} to instructor_id: {data['instructor_id']}")
        return jsonify({'message': 'Student assigned to instructor'})

@app.route('/api/unassign_student', methods=['POST'])
def unassign_student():
    user = authenticate_token()
    if not user or user['role'] != 'admin':
        logging.warning(f"Unauthorized access attempt to /api/unassign_student by user: {user}")
        return jsonify({'error': 'Unauthorized'}), 403

    data = request.get_json()
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            DELETE FROM student_instructor
            WHERE student_id = %s AND instructor_id = %s
        """, (data['student_id'], data['instructor_id']))
        conn.commit()
        logging.info(f"Unassigned student_id: {data['student_id']} from instructor_id: {data['instructor_id']}")
        return jsonify({'message': 'Student unassigned from instructor'})

if __name__ == '__main__':
    app.run(debug=True)
EOF

# Create run_app.sh
echo "Creating run_app.sh..."
cat << 'EOF' > /music_scheduler/run_app.sh
#!/bin/bash
cd /music_scheduler
source venv/bin/activate
exec gunicorn -w 4 -b 127.0.0.1:8000 app:app --timeout 120
EOF
chmod +x /music_scheduler/run_app.sh

# Set up Gunicorn systemd service
echo "Setting up systemd service for Gunicorn..."
cat << 'EOF' > /etc/systemd/system/music_scheduler.service
[Unit]
Description=Music Lesson Scheduler Gunicorn App
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/music_scheduler
ExecStart=/music_scheduler/run_app.sh
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable music_scheduler.service
systemctl restart music_scheduler.service

# Check Gunicorn service status
echo "Checking Gunicorn service status..."
if systemctl is-active --quiet music_scheduler.service; then
    echo "Gunicorn service is running."
    systemctl status music_scheduler.service
else
    echo "Gunicorn service failed to start. Check logs: journalctl -u music_scheduler.service"
    exit 1
fi

# Set permissions for app.py and related files
echo "Setting permissions..."
chown root:www-data /music_scheduler/app.py /music_scheduler/run_app.sh /music_scheduler/config.json
chmod 664 /music_scheduler/app.py /music_scheduler/config.json
chmod 775 /music_scheduler/run_app.sh

echo "Backend setup complete! Check the setup log for details: cat /music_scheduler/logs/setup_backend.log"
